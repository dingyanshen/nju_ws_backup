// Generated by gencpp from file camera/PhotoshelfServiceResponse.msg
// DO NOT EDIT!


#ifndef CAMERA_MESSAGE_PHOTOSHELFSERVICERESPONSE_H
#define CAMERA_MESSAGE_PHOTOSHELFSERVICERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace camera
{
template <class ContainerAllocator>
struct PhotoshelfServiceResponse_
{
  typedef PhotoshelfServiceResponse_<ContainerAllocator> Type;

  PhotoshelfServiceResponse_()
    : results()
    , positions_z()
    , positions_x()  {
    }
  PhotoshelfServiceResponse_(const ContainerAllocator& _alloc)
    : results(_alloc)
    , positions_z(_alloc)
    , positions_x(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _results_type;
  _results_type results;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _positions_z_type;
  _positions_z_type positions_z;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _positions_x_type;
  _positions_x_type positions_x;





  typedef boost::shared_ptr< ::camera::PhotoshelfServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera::PhotoshelfServiceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PhotoshelfServiceResponse_

typedef ::camera::PhotoshelfServiceResponse_<std::allocator<void> > PhotoshelfServiceResponse;

typedef boost::shared_ptr< ::camera::PhotoshelfServiceResponse > PhotoshelfServiceResponsePtr;
typedef boost::shared_ptr< ::camera::PhotoshelfServiceResponse const> PhotoshelfServiceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::camera::PhotoshelfServiceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::camera::PhotoshelfServiceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace camera

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'camera': ['/home/eaibot/nju_ws/src/camera/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::camera::PhotoshelfServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera::PhotoshelfServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera::PhotoshelfServiceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera::PhotoshelfServiceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera::PhotoshelfServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera::PhotoshelfServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::camera::PhotoshelfServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "880c8ac3d7edb422a74a333fb36ec2cc";
  }

  static const char* value(const ::camera::PhotoshelfServiceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x880c8ac3d7edb422ULL;
  static const uint64_t static_value2 = 0xa74a333fb36ec2ccULL;
};

template<class ContainerAllocator>
struct DataType< ::camera::PhotoshelfServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "camera/PhotoshelfServiceResponse";
  }

  static const char* value(const ::camera::PhotoshelfServiceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::camera::PhotoshelfServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] results\n\
int32[] positions_z\n\
int32[] positions_x\n\
";
  }

  static const char* value(const ::camera::PhotoshelfServiceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::camera::PhotoshelfServiceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.results);
      stream.next(m.positions_z);
      stream.next(m.positions_x);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PhotoshelfServiceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera::PhotoshelfServiceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::camera::PhotoshelfServiceResponse_<ContainerAllocator>& v)
  {
    s << indent << "results[]" << std::endl;
    for (size_t i = 0; i < v.results.size(); ++i)
    {
      s << indent << "  results[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.results[i]);
    }
    s << indent << "positions_z[]" << std::endl;
    for (size_t i = 0; i < v.positions_z.size(); ++i)
    {
      s << indent << "  positions_z[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.positions_z[i]);
    }
    s << indent << "positions_x[]" << std::endl;
    for (size_t i = 0; i < v.positions_x.size(); ++i)
    {
      s << indent << "  positions_x[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.positions_x[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMERA_MESSAGE_PHOTOSHELFSERVICERESPONSE_H
